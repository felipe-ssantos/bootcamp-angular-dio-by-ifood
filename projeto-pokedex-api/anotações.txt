//Anotações pessoais para revisão. Talvez não faça sentido para algumas pessoas. xD
Como é feita a requisição HTTP, de forma simples.

//O que compoem a URL
URL: https://pokeapi.co/api/v2/pokemon/ditto
    ${IP}/${path = caminho de identificação do recurso},

//Do servidor acima solicitamos a API
    
 https://pokeapi.co <-- IP/Server   api/v2/pokemon/ditto  <-- caminho do recurso | add argumentos no filtro, sintaxe Query string:?offset=4&limit=2

 Completo, exemplo: https://pokeapi.co/api/v2/pokemon/ditto?offset=4&limit=2

////////////////////////////////////////////////////////////
Elencando o que prioridade de linguagem para a API

Resquest Hearders //como a requisição está sendo configurada.
    configuração
    accept- linguage:
    pt-BR;q=1
    pt-;q=0.9
    en-US;q=0.8
    en;q=0.7
    gl;q=0.6

Reponse Hearders //como a resposta da requisição está configurada.
    configuração

////////////////////////////////////////////////////////////
Exemplos de autenticação usando o Hearders, por meio do método "Authorization"

Resquest Hearders
    configuração
    Authorization: basic, bearer  

////////////////////////////////////////////////////////////
*** Tipos de requisição feitas ao servidor: ***

Toda requisição tem seu método.

- Resquest Method: GET "Solicitação de um cliente para obter um recurso específico do servidor."

- Resquest Method: POST "Utilizado para enviar dados do cliente para o servidor, geralmente para criar ou atualizar informações no servidor."

- Resquest Method: PUT "Usado para atualizar ou modificar um recurso existente no servidor, substituindo-o completamente pelo conteúdo enviado na requisição"

- Resquest Method: DELETE "Utilizado para solicitar que um servidor remova um recurso identificado por uma determinada URL. Ele é utilizado para excluir informações em um servidor."

- Resquest Method: PATCH "Usado para atualizar parcialmente um recurso existente no servidor. Ou seja, é utilizado quando você quer fazer uma alteração específica em uma parte do recurso, sem precisar reenviar todas as informações do recurso inteiro."

///////////////////////////////////////////////////////////

//IP convertido pelo DNS
IP: https://pokeapi.co
//IP sem conversão
Caso local, exemplo: http://127.0.0.1:3000

///////////////////////////////////////////////////////////

Body (corpo da requisição, faz mais sentido para o método POST, PUT e PATCH) e Status Code

Exemplo:

Resquest Hearders
    content-type: application/json

Resquest Body
{
    "name": "Teste"
} //Possibilidade de enviar grande quantidade de dados, desde que o método usado faça sentido.

O Body pode estar tanto da requisição, quanto na resposta. Na resposta implicitamente o Body já tem o método GET.

Resposta do Servidor terá:

STATUS CODE: significa o que aconteceu com a requisição, se foi processada ou não etc. O número mostrado indica o que aconteceu.

Alguns dos STATUS mais importantes:
200 OK: Indica que a requisição foi bem sucedida e o servidor retornou um response body.
201 Created: Indica que uma nova entidade foi criada com sucesso no servidor.
204 No Content: Indica que a requisição foi bem sucedida e o servidor não retornou nenhum conteúdo no response body.
400 Bad Request: Indica que a requisição é inválida, ou que faltam parâmetros obrigatórios.
401 Unauthorized: Indica que o acesso à requisição é restrito e requer autenticação do usuário.
403 Forbidden: Indica que o acesso à requisição é proibido para o usuário autenticado.
404 Not Found: Indica que o servidor não conseguiu encontrar o recurso solicitado.
500 Internal Server Error: Indica que o servidor encontrou um erro ao processar a requisição.

https://httpstatusdogs.com/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Para consumo da API será usado o Fetch API: https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API/Using_Fetch
Como usar: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
O Fetch retorna uma 'promises' promessa de uma resposta: https://dio.dev/usando-promises-com-fetch-no-javascript

Para processar o fetch usamod o método then: 

//Definindo variáveis iniciais
const offset = 0;
const limit = 10;
const url = `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`

//Requisição / Processamento Assíncrono / Por padrão o 'fetch' usa o método GET
fetch(url).then(fuction (response){
    console.log(response) //A função só e executada, após o termino da requisição feita pelo parametro 'fetch(url)'.    
}) //A resposta não será imediata. 

const x = 10 + 10
console.log(x)

// Para manipular o fracasso usamos o 'catch'.
fetch(url).then(fuction (response){
    console.log(response) 
})
.catch(function(error) {
    console.log(error)
})
//Quando a requisição acima terminar independente do sucesso ou fracasso, temos o 'finally"
.finally(function() {
    console.log('Requisição concluída')
}
//Estrutura de tratamento de erro

try {

} catch (error) {

} finally {

}
Esse é um bloco de código JavaScript que utiliza o try-catch-finally para lidar com possíveis erros durante a execução do código.

A instrução try é usada para definir um bloco de código a ser testado quanto a erros. Ou seja, todo o código que estiver dentro do bloco try será executado normalmente, até que ocorra um erro.

Caso ocorra um erro dentro do bloco try, a execução do código é interrompida e o controle é transferido para o bloco catch. O bloco catch é responsável por tratar o erro e realizar as ações necessárias para corrigi-lo ou informar o usuário sobre o problema. O erro é armazenado na variável "error".

O bloco finally é opcional e é executado independentemente de ter ocorrido ou não um erro dentro do bloco try. Ele é geralmente utilizado para realizar ações de limpeza, como fechar arquivos ou conexões de banco de dados.

Em resumo, o bloco try-catch-finally é utilizado para garantir a integridade do código e fornecer informações úteis para o usuário em caso de erros.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Esse método não e o mais indicado, pois, usa callbacks dentro de callbacks.

fetch(url).then(fuction (response){
    response.json().then(function (reponseBody){
        console.log(responseBody)
    } //USANDO response.json() temos o objeto convertido, quando queremos mudar o "body: readabstream" servindo para manipular os objetos.
})
.catch(function(error) {
    console.log(error)
})
.finally(function() {
    console.log('Requisição concluída')
})


// O jeito mais adequado seria este:

Esse método não e o mais indicado, pois, usa callbacks dentro de callbacks.
// A linha abaixo realiza uma requisição HTTP utilizando a função fetch(), passando como parâmetro a URL da requisição.

// O método then() é encadeado à chamada anterior, e recebe como argumento uma função que será executada quando a resposta da requisição HTTP for obtida.
.then(function(response) {

    // A função retorna o corpo da resposta no formato JSON, utilizando o método json() da resposta.
    return response.json();
})

// O método then() é encadeado à chamada anterior, e recebe como argumento uma função que será executada com o corpo da resposta, já convertido em um objeto JSON.
.then(function(jsonBody) {

    // A função imprime no console o corpo da resposta, já em formato JSON.
    console.log(jsonBody);
})

// O método catch() é encadeado à chamada anterior, e recebe como argumento uma função que será executada caso ocorra algum erro durante a requisição.
.catch(function(error) {

    // A função imprime no console o erro ocorrido durante a requisição.
    console.log(error);
})

// O método finally() é encadeado à chamada anterior, e recebe como argumento uma função que será executada independente do sucesso ou falha da requisição.
.finally(function() {

    // A função imprime no console a mensagem "Requisição concluída".
    console.log('Requisição concluída');
})


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Agora vamos ver o método "arrow function" ou " => ", sem aspas, para reduzir o tamanho da função


//usado em callbacks ou quando não queremos ter um contexto isolado.
fetch(url)
    .then((response) => response.json()) //No primeiro 'then' tranformo o 'response' em uma 'promise' do 'body' convertido em json    
    //Caso tivermos apenas uma linha de "return" não precisamos declarar o corpo da função.
    .then(fuction (jsonBody) => console.log(jsonBody)) //Recebendo o 'body' convertido, e imprimindo ele.
    .catch(function(error) => console.log(error)) //caso não imprima, mostrara mostrará o erro aqui.
    
Sempre o que vai para o segundo 'then' e o retorno do primeiro. E o que vai para o primeiro e o retorno da promise, no caso, o 'fetch'     
  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Em JavaScript, um callback é uma função que é passada como argumento para outra função e é executada quando determinado evento acontece ou quando uma tarefa assíncrona é concluída.

De forma simples, imagine que você precisa esperar a execução de uma tarefa assíncrona, como uma requisição de dados para um servidor. Em vez de ficar aguardando a resposta de forma síncrona, o JavaScript permite que você passe uma função callback que será executada quando a resposta chegar. Essa função pode ser uma ação que depende da resposta recebida, como atualizar a interface gráfica da página.

Callbacks são muito utilizados em funções assíncronas como setTimeout(), setInterval(), e em chamadas a APIs que dependem de requisições ao servidor. Eles permitem que o código continue sendo executado enquanto se aguarda uma resposta, tornando a execução mais eficiente e permitindo a criação de aplicações mais dinâmicas.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Em JavaScript, "assíncrona" se refere a uma forma de execução de código onde uma tarefa pode ser realizada em segundo plano, sem interromper o fluxo normal de execução do programa. Isso significa que enquanto a tarefa está sendo executada, o código pode continuar rodando normalmente.

Por exemplo, quando uma função é chamada de forma assíncrona, a execução do código continua mesmo que essa função ainda não tenha sido concluída. Isso permite que outras tarefas sejam realizadas enquanto se aguarda o resultado da função assíncrona.

Tarefas assíncronas são muito comuns em JavaScript, especialmente em aplicações web que dependem de interações com o usuário e chamadas a APIs de terceiros. Alguns exemplos de tarefas assíncronas em JavaScript incluem requisições Ajax, manipulação de arquivos, animações e operações com banco de dados.

Ou seja, executa outras funções em quanto outra está sendo requisitada sem atrapalhar as funções que já estão em execução.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

